<defun name="template">
  <in name="base_filename" type="string" place="place_base_filename"/>
  <in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_input"/>
  <out name="output" type="string" place="place_output"/>
  <out name="graph" type="string" place="graph"/>

  <net>
    <place name="place_input" type="string"/>
    <place name="place_output" type="string"/>
    <place name="place_base_filename" type="string"/>
    <place name="place_library_name" type="string"/>

    <transition name="compute">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="input" type="string"/>
        <out name="output" type="string"/>
        <module name="singular_template" require_function_unloads_without_rest="false" function="compute(input,library_name,output)">
          <cinclude href="interface/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <cinclude href="iostream" />
          <code><![CDATA[
    output=  RESOLVE_INTERFACE_FUNCTION( singular_template_compute_StdBasis) (input,library_name);
          std::cout<<"****output1****"<<output<<std::endl;
            		]]>          </code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-in port="input" place="place_input"/>
      <connect-out port="output" place="graph"/>
    </transition>

    <place name="graph" type="string"/>


    <transition name="compute1">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
        <out name="output" type="string"/>
        <module name="singular_template" require_function_unloads_without_rest="false" function="compute1(input,library_name,output)">
          <cinclude href="interface/template_interface.hpp" />
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <cinclude href="interface/feynman.hpp" />

          <cinclude href="iostream" />
          <code><![CDATA[
          
         std::cout<<" ***** myinput***** "<<input<<std::endl;

         std::vector<std::string> result;
    std::string current;
    int braceCount = 0;

    for (char c : input) {
        if (c == '{') {
            braceCount++;
            current += c;
        }
        else if (c == '}') {
            braceCount--;
            current += c;
        }
        else if (c == ',' && braceCount == 0) {
            // Add current token to result if not inside braces
            if (!current.empty()) {
                result.push_back(current);
                current.clear();
            }
        }
        else {
            // Add character to current token
            current += c;
        }
    }

    // Add the last token
    if (!current.empty()) {
        result.push_back(current);
    }

    // Trim leading/trailing whitespace from each entry
    for (auto& entry : result) {
        entry.erase(0, entry.find_first_not_of(" \t"));
        entry.erase(entry.find_last_not_of(" \t") + 1);
    }

 for (size_t i = 0; i < result.size(); ++i) {
        std::cout << "result[" << i << "]=" << result[i] << std::endl;
    }

            		]]>
          </code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-in port="input" place="graph"/>
      <connect-out port="output" place="place_output"/>
    </transition>

  </net>
</defun>